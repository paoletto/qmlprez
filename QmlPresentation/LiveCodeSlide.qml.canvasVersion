/****************************************************************************
**
** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the QML Presentation System.
**
** $QT_BEGIN_LICENSE:LGPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia.  For licensing terms and
** conditions see http://qt.digia.com/licensing.  For further information
** use the contact form at http://qt.digia.com/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Digia gives you certain additional
** rights.  These rights are described in the Digia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
**
**
** $QT_END_LICENSE$
**
****************************************************************************/


import QtQuick 2.5
import QtQuick.Particles 2.0
import QmlPresentation 1.0

Slide {
    id: slide

    title: "Qt Quick -  Canvas"

    PaletteLoader {
        id: paletteLoader
        name: "Cute"
    }

    property alias palette: paletteLoader.palette

    Rectangle {
        height: parent.height
        width: parent.width * 0.45
        anchors.right: parent.right;
        antialiasing: true
        radius: slide.height * 0.03;
        color: Qt.rgba(0.0, 0.0, 0.0, 0.2);
        Canvas {
            id:canvas
            anchors.fill: parent;

            renderTarget: Canvas.Image;
            antialiasing: true;
            onPaint: {
                eval(editor.text);
            }
        }
    }

    Rectangle {
        height: parent.height
        width: parent.width * 0.45
        anchors.left: parent.left
        antialiasing: true
        radius: slide.height * 0.03;
        color: Qt.rgba(0.0, 0.0, 0.0, 0.2);

        clip: true;

        TextEdit {
            id: editor
            anchors.fill: parent;
            anchors.margins: 10

            font.pixelSize: 16
            color: "white"
            font.family: "courier"
            font.bold: true

            text:
"var ctx = canvas.getContext('2d');
ctx.save();
ctx.clearRect(0, 0, canvas.width, canvas.height);
ctx.strokeStyle = 'palegreen'
ctx.fillStyle = 'limegreen';
ctx.lineWidth = 5;

ctx.beginPath();
ctx.moveTo(100, 100);
ctx.lineTo(300, 100);
ctx.lineTo(100, 200);
ctx.closePath();
ctx.fill();
ctx.stroke();

ctx.fillStyle = 'aquamarine'
ctx.font = '20px sansserif'
ctx.fillText('HTML Canvas API!', 100, 300);
ctx.fillText('Imperative Drawing!', 100, 340);

ctx.restore();
"
            onTextChanged: canvas.requestPaint();

            onCursorRectangleChanged: {
                emitter.burst(10)

            }

            ParticleSystem {
                id: sys1
                running: slide.visible
            }

            ImageParticle {
                system: sys1
                source: "../examples/animatedbackground/particle.png"
                color: "white"
                colorVariation: 0.2
                alpha: 0
            }

            Emitter {
                id: emitter
                system: sys1

                x: editor.cursorRectangle.x - editor.cursorRectangle.height / 2;
                y: editor.cursorRectangle.y
                width: editor.cursorRectangle.height
                height: editor.cursorRectangle.height
                enabled: false

                lifeSpan: 1000

                velocity: PointDirection { xVariation: 30; yVariation: 30; }
                acceleration: PointDirection {xVariation: 30; yVariation: 30; y: 100 }

                endSize: 0

                size: 4
                sizeVariation: 2
            }

            SyntaxHighlighter {
                id: syntaxHighlighter

                normalColor: palette.editorNormal
                commentColor: palette.editorComment
                numberColor: palette.editorNumber
                stringColor: palette.editorString
                operatorColor: palette.editorOperator
                keywordColor: palette.editorKeyword
                builtInColor: palette.editorBuiltIn
                markerColor: palette.editorMarker
                itemColor: palette.editorItem
                propertyColor: palette.editorProperty
            }

            Component.onCompleted: {
                syntaxHighlighter.setHighlighter(editor)
//                if (ProjectManager.project !== "") {
//                    // add custom components
//                    var files = ProjectManager.files()
//                    for (var i = 0; i < files.length; i++) {
//                        var filename = files[i].split(".")
//                        if (filename[0] !== "main") {
//                            if (filename[1] === "qml")
//                                syntaxHighlighter.addQmlComponent(filename[0])
//                            if (filename[1] === "js")
//                                syntaxHighlighter.addJsComponent(filename[0])
//                        }
//                    }
//                    syntaxHighlighter.rehighlight()
//                }
            }
        } // TextEdit
    } // Rectangle
} // Slide
